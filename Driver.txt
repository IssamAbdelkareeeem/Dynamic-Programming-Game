package com.example.demo4;

import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import javafx.scene.effect.DropShadow;
import javafx.scene.paint.Color;
import javafx.util.Duration;

import java.io.*;
import java.util.*;

public class Driver extends Application {
    int coins[]; //all the coins are stored in this array
    int dpTable[][];
    private Scene initialScene;


    Button manuallyBtn = new Button("Enter manually");
    Button loadFileBtn = new Button("Load file");
    Button randomBtn = new Button("Random");
    Button enterBtn = new Button("Enter");
    Button generateBtn = new Button("Generate Coin Values");

    TextField valuesTxt = new TextField();
    TextField valuesCountTxt = new TextField();
    TextField rangeFromTxt = new TextField();
    TextField rangeToTxt = new TextField();


    Label valuesLabel = new Label("Coins: ");
    Label countLabel = new Label("Count: ");
    Label rangeLabel = new Label("Range: ");

    Button vsComputerBtn = new Button(" Vs Computer");
    Button twoPlayerBtn = new Button(" 2 Players");

    Button nextButton = new Button("Next");
    TextField player1NameTxt = new TextField();
    TextField player2NameTxt = new TextField();


    Stage nameStage = new Stage();
    Stage coinStage = new Stage();
    Stage gameModeStage = new Stage();

    Button playAgainBtn = new Button("Play Again");
    Label finalResult = new Label();
    Button exitBtn = new Button("Exit");
    Button guestBtn = new Button("Guest mode");
    Button backButton = new Button();


    //Computer VS Computer Screen
    Button playAgainComputer = new Button("Play Again");
    //to store each computer's chosen coins in computer vs computer option
    ArrayList<Integer> computer1Coins = new ArrayList<>();
    ArrayList<Integer> computer2Coins = new ArrayList<>();

    TextField player1CoinsField = new TextField();
    TextField player2CoinsField = new TextField();
    Stage computerStage = new Stage();
    TextField resultField = new TextField();

    RadioButton player1Radio = new RadioButton("Player 1");
    RadioButton player2Radio = new RadioButton("Player 2");

    private boolean isPlayerOneTurn = true;  // true because player 1 goes first by default

    Button computerRestartBtn = new Button("Restart");

    Button backComputer = new Button("Back");
    Button restartComputer = new Button("Restart");


    @Override
    public void start(Stage stage) {
        Label rangeHintLabel = new Label("To");
        rangeHintLabel.setStyle("-fx-font-size: 13px; -fx-text-fill: #ffffff; -fx-font-weight: bold;");
        rangeHintLabel.setVisible(false);
        rangeToTxt.setVisible(false);


        VBox mainLayout = new VBox(15);
        mainLayout.setAlignment(Pos.CENTER);
        mainLayout.setStyle(
                "-fx-background-color: linear-gradient(to bottom, #3a362d, #575742); " +
                        "-fx-padding: 20px 30px 20px 30px;"
        );


        HBox buttonLayout = new HBox(10);
        buttonLayout.setAlignment(Pos.CENTER);
        buttonLayout.getChildren().addAll(manuallyBtn, randomBtn, loadFileBtn);

        HBox countLayout = new HBox(10);
        countLayout.setAlignment(Pos.CENTER_LEFT);
        countLabel.setVisible(false);
        valuesCountTxt.setVisible(false);
        countLayout.getChildren().addAll(countLabel, valuesCountTxt);

        HBox rangeLayout = new HBox(10);
        rangeLayout.setAlignment(Pos.CENTER_LEFT);
        rangeLabel.setVisible(false);
        rangeFromTxt.setVisible(false);
        rangeLayout.getChildren().addAll(rangeLabel, rangeFromTxt, rangeHintLabel, rangeToTxt);


        HBox valuesLayout = new HBox(10);
        valuesLayout.setAlignment(Pos.CENTER_LEFT);
        valuesLabel.setVisible(false);
        valuesTxt.setVisible(false);
        valuesLayout.getChildren().addAll(valuesLabel, valuesTxt);

        valuesCountTxt.setPrefWidth(40);
        valuesCountTxt.setMaxWidth(40);
        rangeFromTxt.setPrefWidth(60);
        rangeToTxt.setMaxWidth(60);
        applyGlowEffect(manuallyBtn);
        applyGlowEffect(randomBtn);
        applyGlowEffect(computerRestartBtn);
        computerRestartBtn.setStyle("-fx-font-size: 11px; -fx-padding: 15px 25px; -fx-background-color: #020101; -fx-text-fill: #fff; -fx-border-radius: 30px; -fx-background-radius: 30px;");


        manuallyBtn.setStyle(
                "-fx-font-size: 16px; " +
                        "-fx-padding: 15px 25px; " +
                        "-fx-background-color: linear-gradient(to right, #62624c, #44574d); " +
                        "-fx-text-fill: #fff; " +
                        "-fx-border-radius: 30px; " +
                        "-fx-background-radius: 30px;"
        );
        loadFileBtn.setStyle("-fx-font-size: 16px; -fx-padding: 15px 25px; -fx-background-color: #020101; -fx-text-fill: #fff; -fx-border-radius: 30px; -fx-background-radius: 30px;");
        randomBtn.setStyle(
                "-fx-font-size: 16px; " +
                        "-fx-padding: 15px 25px; " +
                        "-fx-background-color: linear-gradient(to right, #62624c, #44574d); " +
                        "-fx-text-fill: #fff; " +
                        "-fx-border-radius: 30px; " +
                        "-fx-background-radius: 30px;"
        );
        enterBtn.setStyle("-fx-font-size: 16px; -fx-padding: 15px 25px; -fx-background-color: #020101; -fx-text-fill: #fff; -fx-border-radius: 30px; -fx-background-radius: 30px;");
        generateBtn.setStyle("-fx-font-size: 16px; -fx-padding: 15px 25px; -fx-background-color: #62624c; -fx-text-fill: #fff; -fx-border-radius: 30px; -fx-background-radius: 30px;");

        valuesTxt.setStyle("-fx-font-size: 14px; -fx-padding: 10px 20px;");
        valuesCountTxt.setPrefWidth(100);
        valuesCountTxt.setPrefHeight(35);
        rangeFromTxt.setStyle("-fx-font-size: 14px; -fx-padding: 10px 20px;");
        rangeToTxt.setStyle("-fx-font-size: 14px; -fx-padding: 10px 20px;");
        valuesLabel.setStyle("-fx-font-size: 15px; -fx-font-weight: bold; -fx-text-fill: white;");
        countLabel.setStyle("-fx-font-size: 15px; -fx-font-weight: bold; -fx-text-fill: white;");
        rangeLabel.setStyle("-fx-font-size: 15px; -fx-font-weight: bold; -fx-text-fill: white;");

        mainLayout.getChildren().add(buttonLayout);
        mainLayout.getChildren().addAll(countLayout, rangeLayout, valuesLayout);
        enterBtn.setVisible(false);
        generateBtn.setVisible(false);
        mainLayout.getChildren().addAll(enterBtn, generateBtn);

        applyGlowEffect(generateBtn);
        applyGlowEffect(loadFileBtn);

        manuallyBtn.setOnAction(event -> {
            valuesTxt.setStyle("-fx-background-color: #fcfbfb; " +
                    "-fx-text-fill: black; " + // Optional: text color
                    "-fx-background-radius: 7; " + // Optional: rounded corners
                    "-fx-border-color: darkgrey;"); // Optional: border color
            valuesTxt.setPrefHeight(40);

            rangeToTxt.setVisible(false);
            rangeHintLabel.setVisible(false);
            valuesTxt.clear();
            valuesCountTxt.clear();
            rangeFromTxt.clear();

            valuesTxt.setEditable(true);
            manuallyBtn.setDisable(true);
            randomBtn.setDisable(false);
            valuesCountTxt.setVisible(true);
            valuesTxt.setVisible(true);
            valuesLabel.setVisible(true);
            countLabel.setVisible(true);
            rangeLabel.setVisible(false);
            rangeFromTxt.setVisible(false);
            enterBtn.setVisible(true);
            generateBtn.setVisible(false);
        });

        randomBtn.setOnAction(event -> {

            valuesTxt.setStyle("-fx-background-color: #626262; " +
                    "-fx-text-fill: black; " + // Optional: text color
                    "-fx-background-radius: 7; " + // Optional: rounded corners
                    "-fx-border-color: darkgrey;"); // Optional: border color
            valuesTxt.setPrefHeight(40);

            rangeToTxt.setVisible(true);
            rangeHintLabel.setVisible(true);
            valuesTxt.clear();
            valuesCountTxt.clear();
            rangeFromTxt.clear();
            randomBtn.setDisable(true);
            manuallyBtn.setDisable(false);
            valuesCountTxt.setVisible(true);
            valuesTxt.setVisible(true);
            valuesTxt.setEditable(false);
            valuesLabel.setVisible(true);
            countLabel.setVisible(true);
            rangeLabel.setVisible(true);
            rangeFromTxt.setVisible(true);
            enterBtn.setVisible(true);
            generateBtn.setVisible(true);
            valuesTxt.setVisible(true);
            valuesCountTxt.setVisible(true);
            valuesTxt.setDisable(false);
            valuesCountTxt.setDisable(false);
        });

        loadFileBtn.setOnAction(event -> {
            manuallyBtn.fire();
            FileChooser fileChooser = new FileChooser();
            fileChooser.setTitle("Open Coins File");
            fileChooser.getExtensionFilters().add(new FileChooser.ExtensionFilter("Text Files", "*.txt"));

            File file = fileChooser.showOpenDialog(stage);
            if (file != null) {
                try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
                    String countLine = reader.readLine(); //first line which is the count
                    if (countLine == null || !countLine.matches("\\d+")) {
                        showAlert("Error", "Invalid File");
                        return;
                    }

                    int count = Integer.parseInt(countLine);

                    String valuesLine = reader.readLine();//second line which is the values
                    if (valuesLine == null) {
                        showAlert("Invalid File", "Values are missing");
                        return;
                    }

                    String[] valuesArrayStr = valuesLine.split(",");
                    if (valuesArrayStr.length < count) {
                        showAlert("Invalid File", "The number of values are less than " + count);
                        return;
                    }

                    int[] valuesArray = new int[count];
                    for (int i = 0; i < count; i++) {
                        String valueStr = valuesArrayStr[i].trim();
                        try {
                            valuesArray[i] = Integer.parseInt(valueStr);//make the values in the file an array of integers
                        } catch (NumberFormatException e) {
                            showAlert("Invalid Input", "All values must be integers");
                            return;
                        }
                    }

                    coins = valuesArray; //assign the values to the coins array(global)

                    valuesCountTxt.setText(String.valueOf(count));
                    valuesTxt.setText(Arrays.toString(coins).replaceAll("[\\[\\] ]", ""));
                    valuesCountTxt.setVisible(true);
                    valuesTxt.setVisible(true);
                    valuesLabel.setVisible(true);
                    countLabel.setVisible(true);
                    enterBtn.setVisible(true);
                    generateBtn.setVisible(false);

                } catch (IOException e) {
                    showAlert("File Error", "error");
                }
            }
        });


        enterBtn.setOnAction(event -> {
            String countText = valuesCountTxt.getText();
            String valuesText = valuesTxt.getText();

            int count;
            try {
                count = Integer.parseInt(countText);
            } catch (NumberFormatException e) {
                showAlert("Invalid Input", "Please enter a valid number for count");
                return;
            }

            if (count % 2 != 0) {//handle if the count of coins is not even
                showAlert("Invalid Input", "The count must be an even number");
                return;
            }

            String[] valuesArrayStr = valuesText.split(",");
            if (valuesArrayStr.length != count) {
                showAlert("Invalid Input", "The number of entered values does not match the count");
                coins = new int[count];
                return;
            }

            coins = new int[count];
            for (int i = 0; i < valuesArrayStr.length; i++) {
                try {
                    coins[i] = Integer.parseInt(valuesArrayStr[i].trim());
                } catch (NumberFormatException e) {
                    showAlert("Invalid Input", "Please enter valid integer values");
                    coins = new int[count];
                    return;
                }
            }

            Stage currentStage = (Stage) enterBtn.getScene().getWindow();
            openGameModeScene(currentStage);

            System.out.println("Count: " + count);
            System.out.println("Coins: " + Arrays.toString(coins));
        });


        generateBtn.setOnAction(event -> {
            String countText = valuesCountTxt.getText();
            String rangeFrom = rangeFromTxt.getText();
            String rangeTo = rangeToTxt.getText();
            try {
                int count = Integer.parseInt(countText);
                int rangeStart = Integer.parseInt(rangeFrom);
                int rangeEnd = Integer.parseInt(rangeTo);

                if (count <= 0 || rangeStart <= 0 || rangeEnd <= 0) {
                    showAlert("Invalid Input", "Please enter valid positive values for count and range");
                    return;
                }

                if (rangeStart > rangeEnd) {
                    showAlert("Invalid Input", "The start of the range must be less than or equal to the end of the range");
                    return;
                }

                if (count % 2 != 0) {
                    showAlert("Invalid Input", "The count must be an even number");
                    return;
                }

                coins = new int[count];
                Random random = new Random();
                for (int i = 0; i < count; i++) {
                    coins[i] = random.nextInt(rangeEnd - rangeStart + 1) + rangeStart;
                }

                valuesTxt.setText(Arrays.toString(coins).replaceAll("[\\[\\] ]", ""));
            } catch (NumberFormatException e) {
                showAlert("Invalid Input", "Please enter valid numbers for count and range");
            }
        });


        twoPlayerBtn.setOnAction(e -> {
            nameStage.setTitle("Enter Player Names");
            VBox nameLayout = new VBox(10);
            nameLayout.setAlignment(Pos.CENTER);
            nameLayout.setStyle("-fx-background-color: #2a2929; -fx-padding: 20px 30px 20px 30px;");

            Label player1Label = new Label("Player 1 Name:");
            player1Label.setStyle("-fx-font-size: 16px; -fx-text-fill: white;");
            player1NameTxt.setPromptText("Enter Player 1's Name");
            player1NameTxt.setStyle("-fx-font-size: 13px; -fx-padding: 10px;");

            Label player2Label = new Label("Player 2 Name:");
            player2Label.setStyle("-fx-font-size: 16px; -fx-text-fill: white;");
            player2NameTxt.setPromptText("Enter Player 2's Name");
            player2NameTxt.setStyle("-fx-font-size: 13px; -fx-padding: 10px;");

            Label firstTurnLabel = new Label("First turn:");
            firstTurnLabel.setStyle("-fx-font-size: 16px; -fx-text-fill: white;");


            player1Radio.setStyle("-fx-font-size: 13px; -fx-text-fill: white;");


            player2Radio.setStyle("-fx-font-size: 13px; -fx-text-fill: white;");

            ToggleGroup firstTurnGroup = new ToggleGroup();
            player1Radio.setToggleGroup(firstTurnGroup);
            player2Radio.setToggleGroup(firstTurnGroup);

            player1Radio.setSelected(true);

            HBox firstTurnBox = new HBox(10, firstTurnLabel, player1Radio, player2Radio);
            firstTurnBox.setAlignment(Pos.CENTER);

            nextButton.setStyle("-fx-font-size: 14px; -fx-padding: 10px 20px; -fx-background-color: #62624c; -fx-text-fill: white; -fx-border-radius: 30px; -fx-background-radius: 30px;");
            applyGlowEffect(guestBtn);
            guestBtn.setStyle("-fx-background-color: transparent; " +
                    "-fx-border-color: transparent; " +
                    "-fx-text-fill: white; " +
                    "-fx-font-size: 12px; " +
                    "-fx-font-weight: bold; " +
                    "-fx-padding: 2px;");

            nameLayout.getChildren().addAll(player1Label, player1NameTxt, player2Label, player2NameTxt,
                    firstTurnBox,
                    guestBtn, nextButton
            );

            nameStage.setScene(new Scene(nameLayout, 400, 300));
            nameStage.show();
        });


        guestBtn.setOnAction(e -> {
            player1NameTxt.setText("Guest1");
            player2NameTxt.setText("Guest2");
            nextButton.fire();
        });

        nextButton.setOnAction(event -> {
            exitBtn.setVisible(false);
            finalResult.setVisible(false);
            playAgainBtn.setVisible(false);
            applyGlowEffect(playAgainBtn);
            applyGlowEffect(exitBtn);

            playAgainBtn.setStyle("-fx-font-size: 13px; -fx-padding: 10px 15px; -fx-background-color: #020101; -fx-text-fill: #fff; -fx-border-radius: 30px; -fx-background-radius: 30px;");
            exitBtn.setStyle("-fx-font-size: 13px; -fx-padding: 8px 12px; -fx-background-color: #020101; -fx-text-fill: #fff; -fx-border-radius: 30px; -fx-background-radius: 30px;");

            String player1Name = player1NameTxt.getText();
            String player2Name = player2NameTxt.getText();

            if (player1Name.isEmpty() || player2Name.isEmpty()) {
                showAlert("Invalid Input", "Please enter player names");
                return;
            } else {
                nameStage.close();
            }

            System.out.println("Player 1: " + player1Name);
            System.out.println("Player 2: " + player2Name);

            if (player1Radio.isSelected()) {
                isPlayerOneTurn = true; // Player 1 starts
            } else if (player2Radio.isSelected()) {
                isPlayerOneTurn = false; // Player 2 starts
            }

            if (coins == null || coins.length == 0) {
                showAlert("No Coins", "Please enter coins first");
                return;
            }

            coinStage.setTitle("Choose Coins");

            VBox layout = new VBox(10);
            layout.setAlignment(Pos.TOP_CENTER);
            layout.setStyle("-fx-background-color: #3a362d; -fx-padding: 20px 30px 20px 30px;");

            Label turnLabel = new Label();
            if (player1Radio.isSelected()) {
                turnLabel.setText(player1Name + "'s Turn");
            } else if (player2Radio.isSelected()) {
                turnLabel.setText(player2Name + "'s Turn");
            }
            turnLabel.setStyle("-fx-font-size: 20px; -fx-font-weight: bold; -fx-text-fill: white;");
            layout.getChildren().add(turnLabel);

            HBox coinButtonsLayout = new HBox(10);
            coinButtonsLayout.setAlignment(Pos.CENTER);
            coinButtonsLayout.setStyle("-fx-padding: 10px 0px;");

            int[] player1Coins = new int[coins.length / 2];
            int[] player2Coins = new int[coins.length / 2];
            //divide by 2 so each player picks the same number of coins
            int[] player1Index = {0};
            int[] player2Index = {0};
            //single element arrays that track where each player will store his coins

            //player1Index points to the next available coin in the array of player1Coins
            //player2Index points to the next coin for player2 coins in the array

            int[] start = {0};
            int[] end = {coins.length - 1};

            // Initialize players' turns based on the selected radio button
            boolean[] isPlayerOneTurn = {this.isPlayerOneTurn};

            VBox[] coinVBoxes = new VBox[coins.length]; //this array contains the coin and the name of player above it
            Button[] coinButtons = new Button[coins.length]; //the array of COIN BUTTONS

            for (int coinIndex = 0; coinIndex < coins.length; coinIndex++) {
                Label playerLabel = new Label("");

                Button coinButton = new Button(String.valueOf(coins[coinIndex]));
                coinButton.setStyle(
                        "-fx-font-size: 24px; " +
                                "-fx-font-weight: bold; " +
                                "-fx-background-color: transparent; " +
                                "-fx-text-fill: white; " +
                                "-fx-border: none; " +
                                "-fx-padding: 15px 30px;"
                );
                applyGlowEffectCoin(coinButton);

                String imagePath = "C:\\Users\\issam\\Downloads\\coin.png";
                Image coinImage = new Image(imagePath);
                ImageView coinImageView = new ImageView(coinImage);
                coinImageView.setFitWidth(35);
                coinImageView.setFitHeight(35);
                coinButton.setGraphic(coinImageView);

                if (coinIndex != start[0] && coinIndex != end[0]) {
                    coinButton.setDisable(true); //INITIALLY disable all the coins except start and end
                }

                VBox coinBox = new VBox(5);
                coinBox.setAlignment(Pos.CENTER);
                coinBox.getChildren().addAll(playerLabel, coinButton);
                coinVBoxes[coinIndex] = coinBox;
                coinButtons[coinIndex] = coinButton;

                coinButton.setOnAction(coinEvent -> {
                    int selectedCoin = Integer.parseInt(coinButton.getText());

                    //if we select a coin from start or end :
                    //the coin button is disabled & the turn is for the other player
                    if (selectedCoin == coins[start[0]] || selectedCoin == coins[end[0]]) {
                        playerLabel.setText(isPlayerOneTurn[0] ? player1Name : player2Name);
                        coinButton.setDisable(true);

                        if (selectedCoin == coins[start[0]]) {//if we select from the start
                            start[0]++;//then the start becomes the next coin(shift to the right)

                        } else if (selectedCoin == coins[end[0]]) {//if we select from the end
                            end[0]--;//then the end gets shifted to the left
                        }

                        if (isPlayerOneTurn[0]) {
                            player1Coins[player1Index[0]++] = selectedCoin; //after player 1 chooses a coin store it in his coins array
                            playerLabel.setStyle("-fx-font-size: 11px; -fx-font-weight: bold; -fx-text-fill: #ffffff;");
                            System.out.println(player1Name + " selected " + selectedCoin);
                        } else {
                            player2Coins[player2Index[0]++] = selectedCoin;//after player 2 chooses a coin store it in his coins array
                            playerLabel.setStyle("-fx-font-size: 11px; -fx-font-weight: bold; -fx-text-fill: #ead967;");
                            System.out.println(player2Name + " selected " + selectedCoin);
                        }

                        isPlayerOneTurn[0] = !isPlayerOneTurn[0]; //switch turns
                        turnLabel.setText(isPlayerOneTurn[0] ? player1Name + "'s Turn" : player2Name + "'s Turn");

                        for (int j = 0; j < coins.length; j++) {
                            coinButtons[j].setDisable(j != start[0] && j != end[0]); //disable after a coin is SELECTED
                        }

                        if (start[0] > end[0]) {
                            turnLabel.setText("Game Over");
                            //if the index value of the start > index value of the end
                            //there are no coins left to choose & the game is over

                            for (Button btn : coinButtons) {
                                btn.setDisable(true);
                            } //disable all the coins when the game is over

                            Button player1ResultBtn = new Button("Show " + player1Name + "'s Result");
                            Button player2ResultBtn = new Button("Show " + player2Name + "'s Result");

                            player1ResultBtn.setStyle("-fx-font-size: 13px; -fx-padding: 10px 15px; " +
                                    "-fx-background-color: #62624c; -fx-text-fill: #fff; -fx-border-radius: 30px;");
                            player2ResultBtn.setStyle("-fx-font-size: 13px; -fx-padding: 10px 15px; " +
                                    "-fx-background-color: #62624c; -fx-text-fill: #fff; -fx-border-radius: 30px;");

                            Label player1ResultLabel = new Label();
                            player1ResultLabel.setStyle("-fx-font-size: 16px; -fx-font-weight: bold; -fx-text-fill: rgb(2,1,1);");
                            Label player2ResultLabel = new Label();
                            player2ResultLabel.setStyle("-fx-font-size: 16px; -fx-font-weight: bold; -fx-text-fill: #000000;");

                            HBox resultLayout = new HBox(10);
                            resultLayout.setAlignment(Pos.CENTER);
                            resultLayout.getChildren().addAll(player1ResultBtn, player2ResultBtn);
                            layout.getChildren().add(resultLayout);

                            int player1SumRes = 0, player2SumRes = 0;
                            for (int i = 0; i < player1Coins.length; i++) {
                                player1SumRes += player1Coins[i]; //sum of p1 coins
                            }
                            for (int i = 0; i < player2Coins.length; i++) {
                                player2SumRes += player2Coins[i]; //sum of p2 coins
                            }

                            if (player1SumRes > player2SumRes) {
                                finalResult.setText(player1Name + " Wins");
                                finalResult.setStyle("-fx-font-size: 18px; -fx-font-weight: bold; -fx-text-fill: #ffffff;");
                            } else if (player1SumRes < player2SumRes) {
                                finalResult.setText(player2Name + " Wins");
                                finalResult.setStyle("-fx-font-size: 18px; -fx-font-weight: bold; -fx-text-fill: #ead967;");
                            } else {
                                finalResult.setText("Draw");
                                finalResult.setStyle("-fx-font-size: 17px; -fx-font-weight: bold; -fx-text-fill: #000000;");
                                playAgainBtn.setText("Rematch");
                            }

                            VBox resultFieldsLayout = new VBox(10);
                            resultFieldsLayout.setAlignment(Pos.CENTER);
                            resultFieldsLayout.getChildren().addAll(player1ResultLabel, player2ResultLabel, finalResult, playAgainBtn, exitBtn);
                            layout.getChildren().add(resultFieldsLayout);
                            final boolean[] resultsShown = {false, false}; // [0] for player1, [1] for player2

                            player1ResultBtn.setOnAction(e -> {
                                int player1Sum = 0;
                                StringBuilder player1ChosenCoins = new StringBuilder();

                                for (int i = 0; i < player1Coins.length; i++) {
                                    player1Sum += player1Coins[i];  // Sum Player 1's coins
                                    player1ChosenCoins.append(player1Coins[i]);
                                    if (i < player1Coins.length - 1) {
                                        player1ChosenCoins.append(" ");
                                    }
                                }

                                player1ResultLabel.setText(player1Name + ": " + player1Sum + " " + " [" + player1ChosenCoins.toString() + "]");
                                resultsShown[0] = true;

                                if (resultsShown[0] && resultsShown[1]) {
                                    finalResult.setVisible(true);
                                    playAgainBtn.setVisible(true);
                                    exitBtn.setVisible(true);
                                }
                            });

                            player2ResultBtn.setOnAction(e -> {
                                int player2Sum = 0;
                                StringBuilder player2ChosenCoins = new StringBuilder();

                                for (int i = 0; i < player2Coins.length; i++) {
                                    player2Sum += player2Coins[i];
                                    player2ChosenCoins.append(player2Coins[i]);
                                    if (i < player2Coins.length - 1) {
                                        player2ChosenCoins.append(" ");
                                    }
                                }

                                player2ResultLabel.setText(player2Name + ": " + player2Sum + " " + " [" + player2ChosenCoins.toString() + "]");
                                resultsShown[1] = true;

                                if (resultsShown[0] && resultsShown[1]) {
                                    finalResult.setVisible(true);
                                    playAgainBtn.setVisible(true);
                                    exitBtn.setVisible(true);
                                }
                            });
                        }
                    }
                });
            }

            coinButtonsLayout.getChildren().addAll(coinVBoxes);
            layout.getChildren().add(coinButtonsLayout);

            coinStage.setScene(new Scene(layout, 1100, 500));
            coinStage.show();
        });


        vsComputerBtn.setOnAction(e -> {
            computerStage.setTitle("Computer vs Computer");

            if (coins == null || coins.length == 0) {
                System.out.println("Error: Coins array is null or empty.");
                return;
            }

            dpTable = calculateDPTable();


            VBox mainVbox = new VBox(20);
            mainVbox.setAlignment(Pos.CENTER);
            mainVbox.setStyle("-fx-background-color: #3a362d; -fx-padding: 20px;");

            HBox coinButtonsLayout = new HBox(10);
            coinButtonsLayout.setAlignment(Pos.CENTER);
            VBox[] coinContainers = new VBox[coins.length];

            for (int i = 0; i < coins.length; i++) {
                Label coinLabel = new Label("");
                coinLabel.setStyle("-fx-font-size: 12px; -fx-font-weight: bold; -fx-text-fill: white;");

                Button coinButton = new Button(String.valueOf(coins[i]));
                coinButton.setStyle(
                        "-fx-font-size: 24px; " +
                                "-fx-font-weight: bold; " +
                                "-fx-background-color: transparent; " +
                                "-fx-text-fill: white; " +
                                "-fx-border: none; " +
                                "-fx-padding: 15px 30px;"
                );
                String imagePath = "C:\\Users\\issam\\Downloads\\coin.png";
                Image coinImage = new Image(imagePath);
                ImageView coinImageView = new ImageView(coinImage);
                coinImageView.setFitWidth(35);
                coinImageView.setFitHeight(35);
                coinButton.setGraphic(coinImageView);

                VBox coinContainer = new VBox(5);
                coinContainer.setAlignment(Pos.CENTER);
                coinContainer.getChildren().addAll(coinLabel, coinButton);
                coinContainers[i] = coinContainer;

                coinButtonsLayout.getChildren().add(coinContainer);
            }

            VBox dpTableBox = new VBox(10);
            dpTableBox.setAlignment(Pos.CENTER);
            dpTableBox.setVisible(false);
            Label dpTableHeaderLabel = new Label("DP Table");
            dpTableHeaderLabel.setFont(Font.font("Arial", FontWeight.BOLD, 18));
            dpTableHeaderLabel.setTextFill(Color.WHITE);

            GridPane dpGridPane = new GridPane();
            dpGridPane.setAlignment(Pos.CENTER);
            dpGridPane.setHgap(10);
            dpGridPane.setVgap(10);
            dpGridPane.setStyle("-fx-background-color: #3a362d;");
            dpTableBox.getChildren().addAll(dpTableHeaderLabel, dpGridPane);

            HBox resultBox = new HBox(10);
            resultBox.setAlignment(Pos.CENTER);
            resultBox.setVisible(false);
            Label resultLabel = new Label("Result: ");
            resultLabel.setFont(Font.font("Helvetica", FontWeight.BOLD, 20));
            resultLabel.setTextFill(Color.LIGHTGRAY);

            TextField resultField = new TextField();
            resultField.setPrefWidth(15);
            resultField.setEditable(false);
            resultField.setFont(Font.font("Helvetica", FontWeight.BOLD, 16));
            resultField.setStyle("-fx-control-inner-background: #3a362d; -fx-text-fill: lightgray;");
            resultField.setPrefWidth(150);
            resultBox.getChildren().addAll(resultLabel, resultField);

            VBox coinsChosenBox = new VBox(10);
            coinsChosenBox.setAlignment(Pos.CENTER);
            coinsChosenBox.setVisible(false);

            String imagePath = "C:\\Users\\issam\\Downloads\\coin.png";
            Image coinImage = new Image(imagePath);
            ImageView coinImageView = new ImageView(coinImage);
            coinImageView.setFitWidth(25);
            coinImageView.setFitHeight(25);

            String imagePath2 = "C:\\Users\\issam\\Downloads\\coin.png";
            Image coinImage2 = new Image(imagePath2);
            ImageView coinImageView2 = new ImageView(coinImage2);
            coinImageView2.setFitWidth(25);
            coinImageView2.setFitHeight(25);

            HBox computer1Box = new HBox(10);
            computer1Box.setAlignment(Pos.CENTER);
            Label player1CoinsLabel = new Label("Computer 1 Chosen Coins");
            player1CoinsLabel.setFont(Font.font("Arial", FontWeight.BOLD, 16));
            player1CoinsLabel.setTextFill(Color.LIGHTGRAY);

            TextField player1CoinsField = new TextField();
            player1CoinsField.setEditable(false);
            player1CoinsField.setFont(Font.font("Arial", FontWeight.BOLD, 16));
            player1CoinsField.setStyle("-fx-control-inner-background: #3a362d; -fx-text-fill: lightgray;");
            player1CoinsField.setPrefWidth(200);

            computer1Box.getChildren().addAll(player1CoinsLabel, coinImageView, player1CoinsField);

            HBox computer2Box = new HBox(10);
            computer2Box.setAlignment(Pos.CENTER);
            Label player2CoinsLabel = new Label("Computer 2 Chosen Coins");
            player2CoinsLabel.setFont(Font.font("Arial", FontWeight.BOLD, 16));
            player2CoinsLabel.setTextFill(Color.LIGHTGRAY);

            TextField player2CoinsField = new TextField();
            player2CoinsField.setEditable(false);
            player2CoinsField.setFont(Font.font("Arial", FontWeight.BOLD, 16));
            player2CoinsField.setStyle("-fx-control-inner-background: #3a362d; -fx-text-fill: lightgray;");
            player2CoinsField.setPrefWidth(200);

            computer2Box.getChildren().addAll(player2CoinsLabel, coinImageView2, player2CoinsField);
            coinsChosenBox.getChildren().addAll(computer1Box, computer2Box);

            mainVbox.getChildren().addAll(coinButtonsLayout, dpTableBox, coinsChosenBox, resultBox);

            Scene scene = new Scene(mainVbox, 1100, 600);
            computerStage.setScene(scene);
            computerStage.setMaximized(true);

            Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
            alert.setTitle("Choose Option");
            alert.setHeaderText("Show steps of each move (Delay) ?");
            ButtonType withDelay = new ButtonType("Show Steps");
            ButtonType withoutDelay = new ButtonType("Don't Show");
            alert.getButtonTypes().setAll(withDelay, withoutDelay);

            alert.showAndWait().ifPresent(response -> {
                if (response == withDelay) {
                    computerVScomputerWithDelay(coins, dpTable, coinContainers, dpGridPane, dpTableBox, player1CoinsField, player2CoinsField, resultField, coinsChosenBox, resultBox);
                } else {
                    computerVScomputer(coins, dpTable, coinContainers, dpGridPane, dpTableBox, player1CoinsField, player2CoinsField, resultField, coinsChosenBox, resultBox);
                }
            });

            computerStage.show();
        });


        computerRestartBtn.setOnAction(e -> {
            computerStage.close();
            backButton.fire();
        });


        playAgainBtn.setOnAction(e -> {
            Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
            alert.setTitle("Change Coin Settings");
            alert.setHeaderText(null);
            alert.setContentText("Would you like to change the count of coins & values?");

            ButtonType yesBtn = new ButtonType("Yes", ButtonBar.ButtonData.YES);
            ButtonType noBtn = new ButtonType("No", ButtonBar.ButtonData.NO);

            alert.getButtonTypes().setAll(yesBtn, noBtn);

            Optional<ButtonType> result = alert.showAndWait();
            if (result.isPresent() && result.get() == yesBtn) {
                showCoinSettingsAlert();
            } else {
                coinStage.close();
                nextButton.fire();
            }
        });


        exitBtn.setOnAction(e -> {
            coinStage.close();
            enterBtn.fire();
        });


        Scene scene = new Scene(mainLayout, 1100, 500);
        stage.setTitle("Optimal Game Strategy");
        stage.setScene(scene);
        stage.show();
    }

    private void applyGlowEffect(Button button) {
        DropShadow glow = new DropShadow();
        glow.setColor(Color.WHITE);
        glow.setRadius(2);
        glow.setOffsetX(0);
        glow.setOffsetY(0);

        button.setOnMouseEntered(event -> button.setEffect(glow));
        button.setOnMouseExited(event -> button.setEffect(null));
    }

    private void applyGlowEffectCoin(Button button) {
        DropShadow glow = new DropShadow();
        glow.setColor(Color.YELLOW);
        glow.setRadius(2);
        glow.setOffsetX(0);
        glow.setOffsetY(0);

        button.setOnMouseEntered(event -> button.setEffect(glow));
        button.setOnMouseExited(event -> button.setEffect(null));
    }

    private void showAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }


    private void openGameModeScene(Stage currentStage) {
        if (initialScene == null) {
            initialScene = currentStage.getScene();
        }

        if (currentStage == null) {
            System.out.print(" ");
            return;
        }


        currentStage.setTitle("Choose Game Mode");

        Image vsComputerImage = new Image("file:C:/Users/issam/Downloads/monitor.png");
        Image twoPlayerImage = new Image("file:C:/Users/issam/Downloads/people.png");
        Image arrow = new Image("file:C:/Users/issam/Downloads/arrow.png");

        ImageView vsComputerImageView = new ImageView(vsComputerImage);
        ImageView twoPlayerImageView = new ImageView(twoPlayerImage);
        ImageView backArrow = new ImageView(arrow);

        vsComputerImageView.setFitWidth(28);
        vsComputerImageView.setFitHeight(28);
        twoPlayerImageView.setFitWidth(30);
        twoPlayerImageView.setFitHeight(30);
        backArrow.setFitWidth(20);
        backArrow.setFitHeight(20);

        vsComputerBtn.setGraphic(vsComputerImageView);
        twoPlayerBtn.setGraphic(twoPlayerImageView);
        backButton.setGraphic(backArrow);

        vsComputerBtn.setMinSize(120, 50);
        twoPlayerBtn.setMinSize(120, 50);

        vsComputerBtn.setStyle("-fx-font-size: 14px; -fx-padding: 10px 20px; -fx-background-color: #62624c; -fx-text-fill: #fff;");
        twoPlayerBtn.setStyle("-fx-font-size: 14px; -fx-padding: 10px 20px; -fx-background-color: #62624c; -fx-text-fill: #fff;");

        applyGlowEffect(vsComputerBtn);
        applyGlowEffect(twoPlayerBtn);
        applyGlowEffect(backButton);


        backButton.setStyle("-fx-font-size: 14px; -fx-padding: 7px 15px; -fx-background-color: #62624c; -fx-text-fill: #fff;");


        backButton.setOnAction(event -> currentStage.setScene(initialScene));

        VBox layout = new VBox(20);
        layout.setAlignment(Pos.CENTER);
        layout.getChildren().addAll(vsComputerBtn, twoPlayerBtn, backButton);
        layout.setStyle("-fx-background-color: #3a362d; -fx-padding: 20px 30px 20px 30px;");

        Scene newScene = new Scene(layout, 1100, 500);
        currentStage.setScene(newScene);
    }

    public int[][] calculateDPTable() {
        int n = coins.length;
        dpTable = new int[n][n]; //rows and columns for the table = count of the coins

        for (int i = 0; i < n; i++) {
            dpTable[i][i] = coins[i];
        }
        for (int i = 0; i < n - 1; i++) {
            dpTable[i][i + 1] = Math.max(coins[i], coins[i + 1]);
        }

        for (int length = 2; length < n; length++) {
            for (int i = 0; i < n - length; i++) {
                int j = i + length;
                dpTable[i][j] = Math.max(
                        coins[i] + Math.min(dpTable[i + 2][j], dpTable[i + 1][j - 1]),  // Choose first coin
                        coins[j] + Math.min(dpTable[i + 1][j - 1], dpTable[i][j - 2])   // Choose last coin
                );
            }
        }

        return dpTable;
    }

    public static void main(String[] args) {
        launch();
    }

    private void computerVScomputerWithDelay(
            int[] coins, int[][] dpTable, VBox[] coinContainers,
            GridPane dpGridPane, VBox dpTableBox,
            TextField computer1CoinsField, TextField computer2CoinsField,
            TextField resultField, VBox coinsChosenBox, HBox resultBox) {

        int[] start = {0};
        int[] end = {coins.length - 1};

        int[] computer1Coins = new int[coins.length / 2];
        int[] computer2Coins = new int[coins.length / 2];
        //divide by 2 so each computer chooses the same number of coins
        int[] computer1CoinCount = {0};
        int[] computer2CoinCount = {0};

        boolean[] isComputer1Turn = {true};

        applyGlowEffect(restartComputer);
        applyGlowEffect(backComputer);


        restartComputer.setStyle("-fx-font-size: 12px; -fx-padding: 8px 12px; -fx-background-color: #020101; -fx-text-fill: #fff; -fx-border-radius: 30px; -fx-background-radius: 30px;");
        backComputer.setStyle("-fx-font-size: 12px; -fx-padding: 8px 12px; -fx-background-color: #020101; -fx-text-fill: #fff; -fx-border-radius: 30px; -fx-background-radius: 30px;");

        backComputer.setOnAction(e -> {
            Stage stage = (Stage) backComputer.getScene().getWindow();
            stage.close();
        });

        restartComputer.setOnAction(e -> {
            vsComputerBtn.fire();
            computerStage.setMaximized(true);
        });

        HBox buttonBox = new HBox(10);
        buttonBox.setAlignment(Pos.CENTER);
        buttonBox.getChildren().addAll(restartComputer, backComputer);

        Timeline timeline = new Timeline();
        int moveCount = coins.length; //number of moves = number of the coins

        for (int i = 0; i < moveCount; i++) {
            timeline.getKeyFrames().add(new KeyFrame(Duration.seconds(i), event -> {
                if (start[0] > end[0]) {
                    //if the index VALUE of the start > index value of the end , game is over
                    return; // No coins left to choose
                }

                int selectedCoin;
                int selectedIndex;
                if (coins[start[0]] + (start[0] + 2 <= end[0] ? dpTable[start[0] + 2][end[0]] : 0) >
                        coins[end[0]] + (start[0] <= end[0] - 2 ? dpTable[start[0]][end[0] - 2] : 0)) {
                    selectedCoin = coins[start[0]];
                    selectedIndex = start[0];
                    start[0]++;
                } else {
                    selectedCoin = coins[end[0]];
                    selectedIndex = end[0];
                    end[0]--;
                }

                if (selectedIndex >= 0 && selectedIndex < coins.length) {
                    Label coinLabel = (Label) coinContainers[selectedIndex].getChildren().get(0);

                    if (isComputer1Turn[0]) {
                        coinLabel.setText("Computer 1");
                        coinLabel.setStyle("-fx-font-size: 11px; -fx-font-weight: bold; -fx-text-fill: #ffffff;");
                        computer1Coins[computer1CoinCount[0]] = selectedCoin;
                        computer1CoinCount[0]++;
                    } else {
                        coinLabel.setText("Computer 2");
                        coinLabel.setStyle("-fx-font-size: 11px; -fx-font-weight: bold; -fx-text-fill: #ead967;");
                        computer2Coins[computer2CoinCount[0]] = selectedCoin;
                        computer2CoinCount[0]++;
                    }
                }

                isComputer1Turn[0] = !isComputer1Turn[0]; //switch turns

                if (start[0] > end[0]) {
                    dpTableBox.setVisible(true);
                    coinsChosenBox.setVisible(true);
                    resultBox.setVisible(true);
                    //show the dp table and coins for each computer and the result when the game is over

                    dpGridPane.getChildren().clear();

                    for (int j = 0; j < dpTable[0].length; j++) {
                        Label colHeader = new Label(String.valueOf(j)); //column index
                        colHeader.setFont(Font.font("Monospaced", FontWeight.BOLD, 15));
                        colHeader.setTextFill(Color.BLACK);
                        colHeader.setPadding(new Insets(20, 0, 0, 10));
                        dpGridPane.add(colHeader, j + 1, 0); //add the column index label in the row 0
                    }

                    for (int k = 0; k < dpTable.length; k++) {
                        Label rowHeader = new Label(String.valueOf(k));
                        rowHeader.setFont(Font.font("Monospaced", FontWeight.BOLD, 15));
                        rowHeader.setTextFill(Color.BLACK);
                        dpGridPane.add(rowHeader, 0, k + 1);

                        for (int j = 0; j < dpTable[k].length; j++) {
                            Label cellLabel;
                            if (dpTable[k][j] != 0) {
                                cellLabel = new Label(String.format("%2d", dpTable[k][j]));
                            } else {
                                cellLabel = new Label("0"); //print 0 in the empty cells
                            }
                            cellLabel.setFont(Font.font("Monospaced", FontWeight.BOLD, 14));
                            cellLabel.setTextFill(Color.LIGHTGRAY);
                            cellLabel.setStyle("-fx-background-color: #3a362d; -fx-border-color: lightgray; -fx-border-width: 0.5;");
                            cellLabel.setMinSize(30, 30);
                            cellLabel.setAlignment(Pos.CENTER);
                            dpGridPane.add(cellLabel, j + 1, k + 1);
                        }
                    }

                    int sum1 = 0;
                    for (int i1 = 0; i1 < computer1CoinCount[0]; i1++) {
                        sum1 += computer1Coins[i1];
                    }

                    int sum2 = 0;
                    for (int i2 = 0; i2 < computer2CoinCount[0]; i2++) {
                        sum2 += computer2Coins[i2];
                    }

                    computer1CoinsField.setText(Arrays.toString(Arrays.copyOf(computer1Coins, computer1CoinCount[0])));
                    computer2CoinsField.setText(Arrays.toString(Arrays.copyOf(computer2Coins, computer2CoinCount[0])));

                    resultField.setText(String.valueOf(Math.max(sum1, sum2)));
                    resultBox.getChildren().add(buttonBox);
                }
            }));
        }

        timeline.setDelay(new Duration(1000)); //1 second between each move
        timeline.play();
    }

    private void computerVScomputer(
            int[] coins, int[][] dpTable, VBox[] coinContainers,
            GridPane dpGridPane, VBox dpTableBox,
            TextField computer1CoinsField, TextField computer2CoinsField,
            TextField resultField, VBox coinsChosenBox, HBox resultBox) {

        int[] start = {0};
        int[] end = {coins.length - 1};
        int[] computer1Coins = new int[coins.length / 2];
        int[] computer2Coins = new int[coins.length / 2];
        int[] computer1CoinCount = {0};
        int[] computer2CoinCount = {0};
        boolean[] isComputer1Turn = {true};

        applyGlowEffect(restartComputer);
        applyGlowEffect(backComputer);

        restartComputer.setStyle("-fx-font-size: 12px; -fx-padding: 8px 12px; -fx-background-color: #020101; -fx-text-fill: #fff; -fx-border-radius: 30px; -fx-background-radius: 30px;");
        backComputer.setStyle("-fx-font-size: 12px; -fx-padding: 8px 12px; -fx-background-color: #020101; -fx-text-fill: #fff; -fx-border-radius: 30px; -fx-background-radius: 30px;");

        backComputer.setOnAction(e -> {
            Stage stage = (Stage) backComputer.getScene().getWindow();
            stage.close();
        });

        restartComputer.setOnAction(e -> {
            vsComputerBtn.fire();
            computerStage.setMaximized(true);
        });

        HBox buttonBox = new HBox(10);
        buttonBox.setAlignment(Pos.CENTER);
        buttonBox.getChildren().addAll(restartComputer, backComputer);

        int moveCount = coins.length;

        for (int i = 0; i < moveCount; i++) {
            if (start[0] > end[0]) {
                break; // No coins left to choose
            }

            int selectedCoin;
            int selectedIndex;
            if (coins[start[0]] + (start[0] + 2 <= end[0] ? dpTable[start[0] + 2][end[0]] : 0) >
                    coins[end[0]] + (start[0] <= end[0] - 2 ? dpTable[start[0]][end[0] - 2] : 0)) {
                selectedCoin = coins[start[0]];
                selectedIndex = start[0];
                start[0]++;
            } else {
                selectedCoin = coins[end[0]];
                selectedIndex = end[0];
                end[0]--;
            }

            if (selectedIndex >= 0 && selectedIndex < coins.length) {
                Label coinLabel = (Label) coinContainers[selectedIndex].getChildren().get(0);

                if (isComputer1Turn[0]) {
                    coinLabel.setText("Computer 1");
                    coinLabel.setStyle("-fx-font-size: 11px; -fx-font-weight: bold; -fx-text-fill: #ffffff;");
                    computer1Coins[computer1CoinCount[0]] = selectedCoin;
                    computer1CoinCount[0]++;
                } else {
                    coinLabel.setText("Computer 2");
                    coinLabel.setStyle("-fx-font-size: 11px; -fx-font-weight: bold; -fx-text-fill: #ead967;");
                    computer2Coins[computer2CoinCount[0]] = selectedCoin;
                    computer2CoinCount[0]++;
                }
            }

            isComputer1Turn[0] = !isComputer1Turn[0];

            if (start[0] > end[0]) {
                dpTableBox.setVisible(true);
                coinsChosenBox.setVisible(true);
                resultBox.setVisible(true);

                dpGridPane.getChildren().clear();

                for (int j = 0; j < dpTable[0].length; j++) {
                    Label colHeader = new Label(String.valueOf(j));
                    colHeader.setFont(Font.font("Monospaced", FontWeight.BOLD, 15));
                    colHeader.setTextFill(Color.BLACK);
                    colHeader.setPadding(new Insets(20, 0, 0, 10));
                    dpGridPane.add(colHeader, j + 1, 0);
                }

                for (int k = 0; k < dpTable.length; k++) {
                    Label rowHeader = new Label(String.valueOf(k));
                    rowHeader.setFont(Font.font("Monospaced", FontWeight.BOLD, 15));
                    rowHeader.setTextFill(Color.BLACK);
                    dpGridPane.add(rowHeader, 0, k + 1);

                    for (int j = 0; j < dpTable[k].length; j++) {
                        Label cellLabel;
                        if (dpTable[k][j] != 0) {
                            cellLabel = new Label(String.format("%2d", dpTable[k][j]));
                        } else {
                            cellLabel = new Label("0"); //print 0 in the empty cells
                        }
                        cellLabel.setFont(Font.font("Monospaced", FontWeight.BOLD, 14));
                        cellLabel.setTextFill(Color.LIGHTGRAY);
                        cellLabel.setStyle("-fx-background-color: #3a362d; -fx-border-color: lightgray; -fx-border-width: 0.5;");
                        cellLabel.setMinSize(30, 30);
                        cellLabel.setAlignment(Pos.CENTER);
                        dpGridPane.add(cellLabel, j + 1, k + 1);
                    }
                }

                int sum1 = 0;
                for (int i1 = 0; i1 < computer1CoinCount[0]; i1++) {
                    sum1 += computer1Coins[i1];
                }

                int sum2 = 0;
                for (int i2 = 0; i2 < computer2CoinCount[0]; i2++) {
                    sum2 += computer2Coins[i2];
                }

                computer1CoinsField.setText(Arrays.toString(Arrays.copyOf(computer1Coins, computer1CoinCount[0])));
                computer2CoinsField.setText(Arrays.toString(Arrays.copyOf(computer2Coins, computer2CoinCount[0])));

                resultField.setText(String.valueOf(Math.max(sum1, sum2)));
                resultBox.getChildren().add(buttonBox);
            }
        }
    }


    private void showCoinSettingsAlert() {
        TextField countTxt = new TextField();
        TextField valuesTxt = new TextField();

        Dialog<ButtonType> settingsDialog = new Dialog<>();
        settingsDialog.setTitle("Enter Coin Settings");
        settingsDialog.setHeaderText("Please enter the count of coins and their values:");


        Label countLabel = new Label("Coin Count:");
        Label valuesLabel = new Label("Coin Values:");

        GridPane grid = new GridPane();
        grid.setHgap(10);
        grid.setVgap(10);
        grid.add(countLabel, 0, 0);
        grid.add(countTxt, 1, 0);
        grid.add(valuesLabel, 0, 1);
        grid.add(valuesTxt, 1, 1);
//        valuesTxt.setText("gogog");
//        valuesCountTxt.setText("gogog");

        settingsDialog.getDialogPane().setContent(grid);
        ButtonType okButtonType = ButtonType.OK;
        settingsDialog.getDialogPane().getButtonTypes().addAll(okButtonType, ButtonType.CANCEL);

        Button okButton = (Button) settingsDialog.getDialogPane().lookupButton(okButtonType);
        okButton.addEventFilter(ActionEvent.ACTION, event -> {
            String countText = countTxt.getText();
            String valuesText = valuesTxt.getText();

            if (!countText.isEmpty() && !valuesText.isEmpty()) {
                try {
                    int coinCount = Integer.parseInt(countText);

                    if (coinCount % 2 != 0) {
                        showAlert("Error", "The coin count must be even");
                        event.consume();
                        return;
                    }

                    String[] valuesArray = valuesText.split("[,\\s]+");
                    if (valuesArray.length != coinCount) {
                        showAlert("Error", "The number of entered values does not match the coin count");
                        event.consume();
                        return;
                    }

                    coins = new int[valuesArray.length];
                    for (int i = 0; i < valuesArray.length; i++) {
                        coins[i] = Integer.parseInt(valuesArray[i]);
                    }

                    System.out.println("Coin Count: " + coinCount);
                    System.out.println("Coin Values: " + Arrays.toString(coins));

                    nextButton.fire();

                } catch (NumberFormatException e) {
                    showAlert("Invalid input", "Please enter valid numbers only");
                    event.consume(); //just to not exit the alert after pressing OK
                }
            } else {
                showAlert("Error", "Please fill in both fields");
                event.consume();
            }
        });
        settingsDialog.showAndWait();
    }

}
